package registry

import (
	"path"

	"github.com/coreos/fleet/etcd"
	"github.com/coreos/fleet/sign"
)

const (
	signingPrefix = "/signing/"
)

// CreateSignatureSet stores the given SignatureSet in the repository
func (r *EtcdRegistry) CreateSignatureSet(ss *sign.SignatureSet) error {
	json, _ := marshal(ss)
	req := etcd.Create{
		Key:   r.signatureSetPath(ss.Tag),
		Value: json,
	}
	_, err := r.etcd.Do(&req)
	return err
}

// DestroySignatureSet destroys the SignatureSet associated with the given tag
func (r *EtcdRegistry) DestroySignatureSet(tag string) {
	req := etcd.Delete{
		Key: r.signatureSetPath(tag),
	}
	r.etcd.Do(&req)
}

// getSignatureSet returns the SignatureSet associated with the given tag
func (r *EtcdRegistry) getSignatureSet(tag string) *sign.SignatureSet {
	req := etcd.Get{
		Key:       r.signatureSetPath(tag),
		Recursive: true,
	}
	resp, err := r.etcd.Do(&req)

	// Assume the error was KeyNotFound and return an empty data structure
	if err != nil {
		return nil
	}

	var sig sign.SignatureSet
	//TODO: Handle the error generated by unmarshal
	unmarshal(resp.Node.Value, &sig)

	return &sig
}

// JobSignatureSet retrieves the SignatureSet associated with the given
// job, or nil if none can be found
func (r *EtcdRegistry) JobSignatureSet(name string) (*sign.SignatureSet, error) {
	// TODO(jonboulle): handle errors
	return r.getSignatureSet(sign.TagForJob(name)), nil
}

func (r *EtcdRegistry) destroySignatureSetOfJob(name string) {
	r.DestroySignatureSet(sign.TagForJob(name))
}

func (r *EtcdRegistry) signatureSetPath(s string) string {
	return path.Join(r.keyPrefix, signingPrefix, s)
}
